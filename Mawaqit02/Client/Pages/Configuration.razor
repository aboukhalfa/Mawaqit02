@page "/configuration"
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<FiveCards Values="@Values" BackgroundColor="@CardBackgroundColor"
           SelectedBackgroundColor="@SelectedCardBackgroundColor"
           TextColor="@CardTextColor"
           SelectedTextColor="@SelectedCardTextColor"></FiveCards>
<br />

<div class="container-fluid">
    <div class="row">
        <div class="col-sm-2 text-sm-right">
            <label>Fill:</label>
        </div>
        <div class="col-sm-10">
            <input style="width: 120px"
                   type="color" @bind-value="@CardBackgroundColor" @bind-value:event="oninput" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-2 text-sm-right">
            <label>Selected fill:</label>
        </div>
        <div class="col-sm">
            <input style="width: 120px"
                   type="color" @bind-value="@SelectedCardBackgroundColor" @bind-value:event="oninput" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-2 text-sm-right">
            <label>Text:</label>
        </div>
        <div class="col-sm">
            <input style="width: 120px"
                   type="color" @bind-value="@CardTextColor" @bind-value:event="oninput" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-2 text-sm-right">
            <label>Selected text:</label>
        </div>
        <div class="col-sm">
            <input style="width: 120px"
                   type="color" @bind-value="@SelectedCardTextColor" @bind-value:event="oninput" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-2 text-sm-right">
        </div>
        <div class="col-sm">
            <button class="btn btn-primary" @onclick="SaveColors">Save</button>
            <button class="btn btn-danger" @onclick="ResetColors">Reset</button>
        </div>
    </div>

</div>

<br />

<br />


@code {

    public string CardBackgroundColor { get; set; } = "#1b8046";

    public string SelectedCardBackgroundColor { get; set; } = "#275eb0";

    public string CardTextColor { get; set; } = "#FFFFFF";

    public string SelectedCardTextColor { get; set; } = "#FFFFFF";

    private async void SaveColors()
    {
        await LocalStorage.SetItemAsync("fill", CardBackgroundColor);
        await LocalStorage.SetItemAsync("selectedfill", SelectedCardBackgroundColor);
        await LocalStorage.SetItemAsync("text", CardTextColor);
        await LocalStorage.SetItemAsync("selectedtext", SelectedCardTextColor);
    }

    private async void ResetColors()
    {
        await LocalStorage.RemoveItemAsync("fill");
        await LocalStorage.RemoveItemAsync("selectedfill");
        await LocalStorage.RemoveItemAsync("text");
        await LocalStorage.RemoveItemAsync("selectedtext");
    }

    List<(string Title, DateTime Value, bool IsSelected)> Values = new List<(string Title, DateTime Value, bool IsSelected)>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var names = Util.GetSalatArabicNames();
        var titles = names.Take(1).Union(
            names.Skip(2).Take(2)).Union(
            names.Skip(5));
        var dt = DateTime.Now.Date.AddHours(5);
        foreach (var title in titles)
        {
            Values.Add((title, dt, dt.Hour == 9 ? true : false));
            dt = dt.AddHours(4);
        }

        CardBackgroundColor = await LocalStorage.GetItemAsync<string>("fill") ?? CardBackgroundColor;
        SelectedCardBackgroundColor = await LocalStorage.GetItemAsync<string>("selectedfill") ?? SelectedCardBackgroundColor;
        CardTextColor = await LocalStorage.GetItemAsync<string>("text") ?? CardTextColor;
        SelectedCardTextColor = await LocalStorage.GetItemAsync<string>("selectedtext") ?? SelectedCardTextColor;

    }
}